function [freqs, spec, h]= gyroChar_Spectrum(filename,varargin)
% gyroChar_Spectrum - Generates the spectrum from dynamic signal analyzer data
%   [freqs, spec, h]= gyroChar_Spectrum(folder,filename)
%  INPUTS
%   filename - data filename from Agilent 35670A dynamic signal analyzer
%    Do not include extension
%  OPTIONAL INPUT PARAMETER PAIRS
%   folder, f - folder containing the data (complete path)
%   plot, p - enable plotting of the spectrum {default: true}
%   signalName, n - name of the signal (included in title)
%    {default: ''}
%   saveIMG - save figure to an image {default: true}
%   date, d - date data was taken {default: date data was processed}
% 
%  OUTPUTS
%   freqs - frequencies of the spectrum data
%   spec - spectrum data
%   h - handle to the figure of the spectrum plot
% 
% Author: Curtis Mayberry
% 
% See also gyroChar_FreqResponse gyroChar_ScaleFactor gyroChar_E5061B_Bode

%% Check and parse inputs
if numel(varargin)>0
    validParameters = {{'plot', 'p'},{'folder','f'},{'signalName','n'},...
                       {'saveIMG'},{'savePPT'},{'date','d'}};
    params = validateInput(varargin, validParameters);
else
    % Just make addlParms an empty struct so that 'isfield' doesn't error
    % out.
    params=struct;
end

if ~isfield(params,'folder')
params.folder = pwd;
end
% Plottting Options
if ~isfield(params,'plot')
    params.plot = true;
end
if ~isfield(params,'signalName')
    params.signalName = '';
end
if ~isfield(params,'resultsDIR')
    params.resultsDIR = 'Spectrum Results';
end
if ~isfield(params,'saveIMG')
    params.saveIMG = true;
end
if ~isfield(params,'savePPT')
    params.savePPT = false;
end
if ~isfield(params,'date')
    params.date = datestr(now,'mm/dd/yy');
end


% Setup Results Directory
if((params.saveIMG || params.savePPT) && ~isdir(params.resultsDIR))
    [SUCCESS,~,~] = mkdir(params.resultsDIR);
    if(~SUCCESS) 
        disp('mkdir failed');
    end
end
%Clear Previous Powerpoint Version
if(params.savePPT && exist(pptfile,'file') && ~params.holdPPT)
    delete(pptfile);
end

%% Extract Data
freqs_file = fullfile(params.folder,[filename '.X']);

Spec_file = fullfile(params.folder,[filename '.TXT']);

freqs = importfile_Xdata(freqs_file);
spec   = importfile_Ydata(Spec_file);

[~, spec_max_i] = max(spec);
freqs_norm = freqs - freqs(spec_max_i);

%% Plot Spectrum
if(params.plot)
    h = figure;
    semilogy(freqs_norm, spec*1000);
    title([params.signalName ' Spectrum (Peak @ ' num2str(freqs(spec_max_i)) ')'], 'FontSize', 16);
    xlabel('Frequency Offset from Carrier', 'FontSize', 12);
    ylabel('Voltage (mV)', 'FontSize', 12);
    grid on;
else
    h = [];
end

%% Save plot
if(params.saveIMG)
    PlotTitle = strcat('spectrum_', num2str(get(gcf,'Number')),...
                       '_d', params.date);
	print('-dbmp ',gcf,fullfile(params.resultsDIR, PlotTitle), '-r400');
end
if(params.savePPT)
    
end

%% Display carrier information
disp(' ')
disp(['Spectrum carrier frequency = ' num2str(freqs(spec_max_i)/1000) ' kHz']);

end

%% Necessary Functions
function VarName1 = importfile_Xdata(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   VARNAME1 = importfile_Xdata(filename) Reads data from text file FILENAME for
%   the default selection.
%
%   VARNAME1 = importfile_Xdata(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   VarName1 = importfile_Xdata('TRAC2.X',1, 401);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2014/11/05 18:43:53

%% Initialize variables.
delimiter = '';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format string for each line of text:
%   column1: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    dataArray{1} = [dataArray{1};dataArrayBlock{1}];
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
VarName1 = dataArray{:, 1};
end

function spec = importfile_Ydata(filename, startRow, endRow)
%IMPORTFILE_YDATA Import numeric data from a text file as column vectors.
%   spec = importfile_Ydata(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   spec = importfile_Ydata(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   spec = importfile_Ydata('TRAC2.TXT',1, 401);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2014/11/05 18:41:50

%% Initialize variables.
delimiter = '';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Format string for each line of text:
%   column1: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    dataArray{1} = [dataArray{1};dataArrayBlock{1}];
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
spec = dataArray{:, 1};

end
