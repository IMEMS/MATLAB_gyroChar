function [Freq, Mag, Phase, h] = gyroChar_E5061B_Bode(FileName, PlotTitle, varargin)
% gyroChar_E5061B_Bode
% 
% Generates bode plot from data saved on the E5061B Network analyzer.  Data
% should be saved with the magnitude and phase data in two seperate files:
%
% [Freq, Mag, Phase, h] = gyroChar_E5061B_Bode(FileName, PlotTitle,[FreqRange])
%
% [FileName]_MAG.CSV
% [FileName]_PHASE.CSV
% 
% Inputs:
%  FileName - Name of the data file without the suffixes shown above.
%  PlotTitle - Name of the plot
% OPTIONAL INPUT PARAMETER PAIRS
%  plot, p - enable data plotting {default: true}
%  freq - frequency range you want to plot
% 
% Outputs:
%  Freq - Frequency data
%  Mag - Magnitude data
%  Phase - Phase data
%  h - handle to plot's figure
% 
% Author: Curtis Mayberry
% 
% See also gyroChar_ScaleFactor gyroChar_Spectrum gyroChar_FreqResponse
% 

%% Check and parse inputs
if numel(varargin)>0
    validParameters = {{'plot', 'p'},{'folder','f'},{'freq','f'},...
                       {'saveIMG','img'},{'savePPT','ppt'},...
                       {'resultsDIR','results directory','results dir'}};
    params = validateInput(varargin, validParameters);
else
    % Just make addlParms an empty struct so that 'isfield' doesn't error
    % out.
    params=struct;
end

% Plottting Options
if ~isfield(params,'plot')
    params.plot = true;
else h = [];
end

%% Import Data
[Freq,Mag]   = importData_E5061B([FileName '_MAG.CSV']  ,4,1604);
[Freq_P,Phase] = importData_E5061B([FileName '_PHASE.CSV'],4,1604);

if(~(Freq == Freq_P))
    error('FT_Analysis:FrequenyRangeMismatch','Frequency range mismatch in %s', FileName)
end

if isfield(params,'freq')
    FreqRange = params.freq;
    Freq_i = Freq > FreqRange(1) & Freq < FreqRange(2);
else Freq_i = Freq ~= 0;
end

%% Plot
if(params.plot)
    h = figure;
    subplot(2,1,1);
    semilogx(Freq(Freq_i),Mag(Freq_i));
    xlabel('Frequency (Hz)','FontSize',12);
    ylabel('Mag(dB)','FontSize',12);

    subplot(2,1,2);
    semilogx(Freq_P(Freq_i),Phase(Freq_i));
    xlabel('Frequency (Hz)','FontSize',12);
    ylabel('Phase(deg)','FontSize',12);

    title(['Bode: ' PlotTitle],'FontSize',14);
end
end


function [Freq,Data] = importData_E5061B(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [FREQ,DATA] = importData_E5061B(FILENAME) Reads data from text file FILENAME
%   for the default selection.
%
%   [FREQ,DATA] = importData_E5061B(FILENAME, STARTROW, ENDROW) Reads data from
%   rows STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   [Freq,Data] =
%   importData_E5061B('FT_NO_CANCELLATION_VACUUM_5HZ_500KHZ_10-14-14_MAG.CSV',4,
%   1604);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2014/10/16 13:36:34

%% Initialize variables.
if nargin<=2
    startRow = 4;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%20s%21s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', '', 'WhiteSpace', '', 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Allocate imported array to column variable names
Freq = cell2mat(raw(:, 1));
Data = cell2mat(raw(:, 2));

end
